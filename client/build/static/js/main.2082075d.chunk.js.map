{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","apiResponse","window","location","href","console","log","className","src","logo","alt","onClick","this","hanldeRequestClick","hanldeVolunteerClick","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,uMCyE5BC,G,wDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,YAAa,IAFX,E,mEAMjBC,OAAOC,SAASC,KAAO,wG,2CAIvBC,QAAQC,IAAI,0B,+BAcZ,OACE,yBAAKC,UAAU,OACf,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMC,IAAI,UAGtB,yBAAKH,UAAU,YACb,iDAAsB,4CACtB,qIAGF,yBAAKA,UAAU,aACb,mDACA,iIAC8F,+BAIhG,4BAAQA,UAAU,iBAAiBI,QAASC,KAAKC,oBAAjD,wBAGA,yBAAKN,UAAU,mBAAf,iBAA+C,+CAE/C,4BAAQA,UAAU,mBAAmBI,QAASC,KAAKE,sBAAnD,aAIA,yBAAKP,UAAU,WAAf,oJAEA,6BACA,6BAHA,6KAKA,6BACA,6BANA,0K,GAtDUQ,IAAMC,YCQJC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.2082075d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2ba2b4d6.png\";","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = { apiResponse: \"\" }\n  }\n\n  hanldeVolunteerClick() {\n    window.location.href = 'https://docs.google.com/forms/d/e/1FAIpQLSfLBGQ8wMEDAuLXHIgBzQlUjyhihUVDpcyYaaIRIUc8YMHTOw/viewform'\n  }\n\n  hanldeRequestClick() {\n    console.log(\"request disinfectant\")\n  }\n\n  // componentWillMount() {\n  //   fetch('http://localhost:5000/hello')\n  //   .then((response) => {\n  //     return response.json()\n  //   })\n  //   .then((data) => {\n  //     this.setState({ apiResponse: data.message })\n  //   })\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"logo\">\n          <img src={logo} alt=\"logo\" />\n        </div>\n\n        <div className=\"headline\">\n          <h1>A marketplace for <b>sanitization</b></h1>\n          <h3>Looking for hand sanitizer or disinfectant? Find local distilleries producing sanitization products.</h3>\n        </div>\n\n        <div className=\"need-help\">\n          <div>We need your help!</div>\n          <div>\n            We’re currently staffing up volunteers to help contact distilleries and other organizations.<br />\n          </div>\n        </div>\n\n        <button className=\"request-button\" onClick={this.hanldeRequestClick}>\n          REQUEST DISINFECTANT\n        </button>\n        <div className=\"request-tagline\">Requests open <b>Tues, 3-24-2020</b></div>\n\n        <button className=\"volunteer-button\" onClick={this.hanldeVolunteerClick}>\n          VOLUNTEER\n        </button>\n\n        <div className=\"message\">\n        Due to overwhelming demand, many hospitals and assisted living facilities find themselves in desperate need of hand sanitizers and disinfectants.\n        <br/>\n        <br/>\n        The Disinfection Network helps to connect hospitals, assisted living facilities and other essential organizations with local distilleries producing sanitization products. \n        <br/>\n        <br/>\n        We are a team of dedicated volunteers trying to make a difference in our local communities. If you've been looking for a way to help – this is your chance. \n        </div>\n      </header>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}